@model ModelLayer.Cheques
@{
    ViewBag.Title = "Cheques";
    var message = TempData["successmessage"] ?? string.Empty;
    ViewBag.Admin = "active";
    ViewBag.Cheques = "active";
}

<style>

    @@media (min-width: 768px) {

        .container {
            margin-left: 350px;
        }

        .jumbotron {
            width: 1700px;
        }
    }
</style>



@using (Html.BeginForm("Cheques", "Booking", FormMethod.Post, new
{

    role = "form",
    id = "submitbtn",
    enctype = "multipart/form-data"

}))
{
@Html.HiddenFor(x => x.ChequeDateString);
<div class="jumbotron">
    <div class="row">
        <div class="col-md-12 col-xs" style="margin-top:0px">
            <h3 style="margin-top:0px;margin-bottom:4px" align="left">ADD CHEQUES</h3>
            <div class="specialLine col-md-1"></div>
        </div>

    </div>
    <div class="row" style="padding-top:10px">
        @Html.LabelFor(m => m.ChequeNumber, new { @class = "col-md-2" })
        @Html.TextBoxFor(model => model.ChequeNumber, new { @class = "textbox-control col-md-2 col-xs" })
        @Html.LabelFor(m => m.Status, new { @class = "col-md-2" })
        @Html.DropDownListFor(model => model.Status, TempData["ChequeStatus"] as SelectList, "--Select Status--", new { @class = "textbox-control col-md-2 col-xs" })

    </div>
    <div class="row" style="padding-top:10px">
        @Html.LabelFor(m => m.Category, new { @class = "col-md-2" })
        @Html.DropDownListFor(m => m.Category, new List<SelectListItem>
   {
        new SelectListItem{ Text="--Select Category--", Value = "NA"  },
       new SelectListItem{ Text="Advance Commission", Value = "Advance Commission" },
       new SelectListItem{ Text="Commission", Value = "Commission" },
        new SelectListItem{ Text="Others", Value = "Others" },


    }, new { @class = "textbox-control col-md-2 col-xs" })
        <div id="ibogrid" style="display:none">
            @Html.LabelFor(m => m.IBOID, new { @class = "col-md-2" })
            @Html.DropDownListFor(model => model.IBOID, TempData["AgentList"] as SelectList, "--Select Agent--", new { @class = "textbox-control col-md-2 col-xs" })

        </div>
    </div>
    <div class="row" style="padding-top:10px">
        @Html.LabelFor(m => m.PaidTo, new { @class = "col-md-2" })
        @Html.TextBoxFor(model => model.PaidTo, new { @class = "textbox-control col-md-2 col-xs" })
        @Html.LabelFor(m => m.Amount, new { @class = "col-md-2" })
        @Html.TextBoxFor(model => model.Amount, new { @class = "textbox-control col-md-2 col-xs" })
        @Html.LabelFor(m => m.ChequeDate, new { @class = "col-md-2" })
        <div class="col-md-2" style="padding-left:0px">
            <input id="datepicker1" title="datepicker" />
        </div>

    </div>
    <div class="row" style="padding-top:10px">
        @Html.LabelFor(m => m.Remarks, new { @class = "col-md-2" })
        @Html.TextAreaFor(model => model.Remarks, new { @class = "textboxarea-control col-md-3 col-xs" })

    </div>
    <div class="row" style="padding-top:10px;">
        <div class="col-sm-3 no-pad">
            <button type="submit" id="submitbtn" value="New" class="btn btn-default orangebg pull-right"><i class="fa fa-dollar"></i>ADD</button>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 col-xs" style="margin-top:0px">
            <h3 style="margin-top:0px;margin-bottom:4px" align="left">CHEQUES</h3>
            <div class="specialLine col-md-1"></div>
        </div>

    </div>
    <div id="grid"></div>
</div>



}

<script>
    $("#Category").change(function () {
        var value = $("#Category").val();
        if (value == 'Advance Commission' || value == 'Commission') {
            $("#ibogrid").show();
        }
        else {
            $("#ibogrid").hide();
            $("#PaidTo").val("");
            $("#PaidTo").removeAttr("disabled");
        }


    });

    $("#submitbtn").submit(function (e) {

        SetHiddenFields();
        Validations(e);
    });

    function SetHiddenFields() {
        $("#ChequeDateString").val($("#datepicker1").val());
    }

    function Validations(e) {

        if ($("#ChequeNumber").val() == '') {
            e.preventDefault();
            toastr.error("Cheque Number is Required");
            return false;
        }

        if ($("#Status").val() == '') {
            e.preventDefault();
            toastr.error("Status is Required");
            return false;
        }

        if ($("#Category").val() == 'NA') {
            e.preventDefault();
            toastr.error("Category is Required");
            return false;
        }



        if ($("#PaidTo").val() == '') {
            e.preventDefault();
            toastr.error("Paid To is Required");
            return false;
        }

        if ($("#Amount").val() == '') {
            e.preventDefault();
            toastr.error("Amount is Required");
            return false;
        }

    }


    $("#IBOID").change(function () {
        var value = $("#IBOID option:selected").text();
        if (value != '--Select Agent--') {
            $("#PaidTo").val(value);
            $("#PaidTo").attr("disabled", "disabled");
        }
        else {
            $("#PaidTo").val("");
            $("#PaidTo").removeAttr("disabled");
        }

    });

    $("#datepicker1").kendoDatePicker({ format: "dd/MM/yyyy" });
    var todayDate = kendo.toString(kendo.parseDate(new Date()), 'dd/MM/yyyy');
    $("#datepicker1").val(todayDate);


    $(document).ready(function () {
        dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Booking/GetCheques",
                    contentType: "application/json",
                    dataType: "json",
                    type: "POST"
                },
                update: {
                    url: "/Booking/UpdateCheque",
                    dataType: "json",
                    complete: function (jqXhr, textStatus) {
                        if (textStatus == 'success') {
                            toastr.success('Update Successfull');
                            $("#grid").data("kendoGrid").dataSource.read();

                        }
                        else {
                            toastr.error('Error in Updating');
                            $("#grid").data("kendoGrid").dataSource.read();
                        }
                    }
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                }
            },
            batch: true,
            pageSize: 5,
            schema: {
                model: {
                    id: "ID",
                    fields: {
                        ChequeNumber: { editable: false, nullable: true },
                        ChequeDate: { editable: false, nullable: true },
                        //Status: { editable: false, nullable: true },
                        Category: { editable: false, nullable: true },
                        PaidTo: { editable: false, nullable: true }


                    }
                }
            }
        });

        $('.k-icon k-i-edit').toggleClass('.k-icon k-i-edit');
        $("#grid").kendoGrid({
            dataSource: dataSource,
            pageable: true,
            height: 350,
            toolbar: ["search", "excel"],
            excel: {
                fileName: "Cheques.xlsx",

                //proxyURL: "https://demos.telerik.com/kendo-ui/service/export",
                filterable: true,
                allPages: true
            },
            excelExport: exportGridWithTemplatesContent,
            columns: [
                { field: "ChequeNumber", title: "Cheque Number", width: "140px" },
                { field: "Status", title: "Status", width: "120px", editor: statusDropDownEditor},
                { field: "Category", title: "Category", width: "120px" },
                { field: "PaidTo", title: "Paid To", width: "120px" },
                { field: "ChequeDate", title: "Cheque Date", width: "140px", template: '#= kendo.toString(kendo.parseDate(ChequeDate), "dd/MM/yyyy")#' },
                { field: "Amount", title: "Amount", width: "120px" },
                { field: "Remarks", title: "Remarks", width: "140px" },
                { command: ["edit"], title: "&nbsp;", width: "100px" }
            ],
            editable: "inline"
        });


    });


    function exportGridWithTemplatesContent(e) {
        var data = e.data;
        var gridColumns = e.sender.columns;
        var sheet = e.workbook.sheets[0];
        var visibleGridColumns = [];
        var columnTemplates = [];
        var dataItem;
        // Create element to generate templates in.
        var elem = document.createElement('div');

        // Get a list of visible columns
        for (var i = 0; i < gridColumns.length; i++) {
            if (!gridColumns[i].hidden) {
                visibleGridColumns.push(gridColumns[i]);
            }
        }

        // Create a collection of the column templates, together with the current column index
        for (var i = 0; i < visibleGridColumns.length; i++) {
            if (visibleGridColumns[i].template) {
                columnTemplates.push({ cellIndex: i, template: kendo.template(visibleGridColumns[i].template) });
            }
        }

        // Traverse all exported rows.
        for (var i = 1; i < sheet.rows.length; i++) {
            var row = sheet.rows[i];
            // Traverse the column templates and apply them for each row at the stored column position.

            // Get the data item corresponding to the current row.
            var dataItem = data[i - 1];
            for (var j = 0; j < columnTemplates.length; j++) {
                var columnTemplate = columnTemplates[j];
                // Generate the template content for the current cell.
                elem.innerHTML = columnTemplate.template(dataItem);
                if (row.cells[columnTemplate.cellIndex] != undefined)
                    // Output the text content of the templated cell into the exported cell.
                    row.cells[columnTemplate.cellIndex].value = elem.textContent || elem.innerText || "";
            }
        }
    }



    function statusDropDownEditor(container, options) {
        $('<input required name="' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: true,
                dataTextField: "Status",
                dataValueField: "Status",
                dataSource: {
                    type: "json",
                    transport: {
                        read: "/Cascade/GetChequeStatus",

                    }
                }
            });
    }
     $(window).load(function () {
        var tempdataval = '@TempData["successmessage"]';
        if (tempdataval != '') {
            if (tempdataval == 'Cheque Added Successfully')
                toastr.success(tempdataval);
            else {
                toastr.error(tempdataval);
            }
        }

    });
</script>