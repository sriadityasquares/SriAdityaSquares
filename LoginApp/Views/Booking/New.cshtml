@model ModelLayer.BookingInformation
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Booking = "active";
    ViewBag.NewBooking = "active";
    var message = TempData["successmessage"] ?? string.Empty;
}





<style>

    @@media (min-width: 768px) {

        .container {
            margin-left: 350px;
        }

        .jumbotron {
            width: 1700px;
        }
    }
</style>
@using (Html.BeginForm("New", "Booking", FormMethod.Post, new { @class="form-horizontal",  role = "form", id = "submitbtn" }))
{
    //@(ViewContext.ClientValidationEnabled = false)

    @Html.AntiForgeryToken()
<div class="jumbotron">
   
    <div class="row">
        <div class="col-md-12 col-xs" style="margin-top:0px">
            <h3 style="margin-top:0px;margin-bottom:4px" align="left">@ViewBag.ScreenName</h3>
            <div class="specialLine col-md-1"></div>
        </div>

    </div>
    <div class="row">
        <h4 style="color:#ea4f4c;margin-bottom:4px">Customer Information</h4>
        <hr />
    </div>
    @Html.HiddenFor(m => m.ProjectName)
    @Html.HiddenFor(m => m.TowerName)
    @Html.HiddenFor(m => m.FlatName)
    @Html.HiddenFor(m => m.AgentName)
    @Html.HiddenFor(m => m.CountryName)
    @Html.HiddenFor(m => m.StateName)
    @Html.HiddenFor(m => m.CityName)
    @Html.HiddenFor(m => m.PaymentMode)
    @Html.HiddenFor(m => m.Level)
    @Html.HiddenFor(m => m.SchemeName)
    @Html.HiddenFor(m => m.DownPaymentTimePeriod)
    @Html.HiddenFor(m => m.PaymentTimePeriod)
    @Html.HiddenFor(m => m.AgentParent)
    @Html.HiddenFor(m => m.BookingID)
    @Html.HiddenFor(m => m.BookingDate)
    @Html.HiddenFor(m => m.ChequeDateMod)
    @Html.HiddenFor(m => m.SchemePercentage)
    @Html.HiddenFor(m => m.GSTPercentage)
    @Html.HiddenFor(m => m.GSTAmount)
    <div class="row" style="padding-top:5px">
        @Html.LabelFor(m => m.Name, new { @class = "col-md-1 required" })
        @Html.TextBoxFor(m => m.Name, new { @class = "textbox-control col-md-11 col-xs" })
        @*@Html.ValidationMessageFor(m=>m.Name ,"",new { @class = "text-danger" })*@
    </div>
    <div class="row">
        @Html.LabelFor(m => m.Country, new { @class = "col-md-1" })
        @Html.DropDownListFor(model => model.Country, TempData["CountryList"] as SelectList, "--Select Country--", new { @class = "textbox-control col-md-3 col-xs" })
        @Html.LabelFor(m => m.State, new { @class = "col-md-1" })
        @Html.DropDownListFor(model => model.State, new SelectList(" "), "--Select State--", new { @class = "textbox-control col-md-3 col-xs" })
        @*@Html.ValidationMessageFor(m => m.stateID, "", new { @class = "text-danger" })*@
        @Html.LabelFor(m => m.City, new { @class = "col-md-1" })
        @Html.DropDownListFor(model => model.City, new SelectList(" "), "--Select City--", new { @class = "textbox-control col-md-3 col-xs" })
        @*@Html.ValidationMessageFor(m => m.CityID, "", new { @class = "text-danger" })*@
    </div>
    <div class="row">
        @Html.LabelFor(m => m.Nominee, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.Nominee, new { @class = "textbox-control col-md-11 col-xs" })

    </div>
    <div class="row">
        @Html.LabelFor(m => m.Relationship, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.Relationship, new { @class = "textbox-control col-md-3 col-xs" })
        @Html.LabelFor(m => m.Age, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.Age, new { @class = "textbox-control col-md-3 col-xs" })
        @Html.LabelFor(m => m.Dob, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.Dob, new { @class = "textbox-control col-md-3 col-xs" })
    </div>
    <div class="row">
        @Html.LabelFor(m => m.Aadhar, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.Aadhar, new { @class = "textbox-control col-md-5 col-xs", @type = "number" })
        @Html.LabelFor(m => m.Pan, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.Pan, new { @class = "textbox-control col-md-4 col-xs" })
    </div>
    <div class="row">
        @Html.LabelFor(m => m.Address, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.Address, new { @class = "textbox-control col-md-5 col-xs" })
        @Html.LabelFor(m => m.Pincode, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.Pincode, new { @class = "textbox-control col-md-4 col-xs" })
    </div>
    <div style="padding-top:5px" class="row">
        @Html.LabelFor(m => m.Mobile, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.Mobile, new { @class = "textbox-control col-md-5 col-xs", @type = "number" })
        @Html.LabelFor(m => m.Email, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.Email, new { @class = "textbox-control col-md-4 col-xs" })
    </div>

    <div class="row">
        <h4 style="color:#ea4f4c;margin-bottom:4px">Booking Information</h4>
        <hr />
    </div>
    <div class="row" style="padding-top:5px">
        @Html.LabelFor(m => m.ProjectID, new { @class = "col-md-1" })
        @Html.DropDownListFor(model => model.ProjectID, TempData["ProjectList"] as SelectList, "--Select Project--", new { @class = "textbox-control col-md-2 col-xs" })
        @Html.LabelFor(m => m.TowerID, new { @class = "col-md-1" })
        @Html.DropDownListFor(model => model.TowerID, new SelectList(" "), "--Select Tower--", new { @class = "textbox-control col-md-2 col-xs" })
        @Html.LabelFor(m => m.FlatID, new { @class = "col-md-1" })
        @Html.DropDownListFor(model => model.FlatID, new SelectList(" "), "--Select Flat--", new { @class = "textbox-control col-md-2 col-xs" })
        @Html.LabelFor(m => m.SchemeID, new { @class = "col-md-1" })
        @Html.DropDownListFor(model => model.SchemeID, new SelectList(" "), "--Select Scheme--", new { @class = "textbox-control col-md-2 col-xs" })
    </div>
    <div class="row">
        @Html.LabelFor(m => m.Floor, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.Floor, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })
        @Html.LabelFor(m => m.Bhk, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.Bhk, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })
        @Html.LabelFor(m => m.Area, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.Area, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })
        @Html.LabelFor(m => m.Facing, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.Facing, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })
    </div>
    <div class="row">
        @Html.LabelFor(m => m.SftRate, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.SftRate, new { @class = "textbox-control col-md-1 col-xs", @type = "number", @readonly = "readonly" })
        @Html.LabelFor(m => m.HighRiseCharges, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.HighRiseCharges, new { @class = "textbox-control col-md-1 col-xs", @type = "number" })


        @Html.LabelFor(m => m.Discount, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.Discount, new { @class = "textbox-control col-md-1 col-xs", @type = "number" })


        @Html.LabelFor(m => m.TotalRate, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.TotalRate, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })
    </div>
    <div class="row">
        @Html.LabelFor(m => m.AgentID, new { @class = "col-md-1" })
        @Html.DropDownListFor(model => model.AgentID, new SelectList(" "), "--Select Agent--", new { @class = "textbox-control col-md-2 col-xs" })
        @*@Html.LabelFor(m => m.AgentCharges, new { @class = "col-md-1" })
            @Html.TextBoxFor(m => m.AgentCharges, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })*@

        @Html.LabelFor(m => m.FinalRate, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.FinalRate, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })
        @Html.LabelFor(m => m.ClubHouseCharges, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.ClubHouseCharges, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })
        @Html.LabelFor(m => m.OtherCharges, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.OtherCharges, new { @class = "textbox-control col-md-1 col-xs" })
        @*@Html.LabelFor(m => m.GrandRate, new { @class = "col-md-2" })
            @Html.TextBoxFor(m => m.GrandRate, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })*@
    </div>
    <div class="row">

        @Html.LabelFor(m => m.PaymentModeID, new { @class = "col-md-1" })

        @if (!User.IsInRole("Franchise Owner"))
        {
            @Html.DropDownListFor(m => m.PaymentModeID, new List<SelectListItem>
    {
         new SelectListItem{ Text="--Mode--", Value = "0"  },
        new SelectListItem{ Text="Cheque", Value = "1" },
        new SelectListItem{ Text="NEFT", Value = "2" },
        new SelectListItem{ Text="CC", Value = "3" },
        new SelectListItem{ Text="Cash", Value = "4" },
        new SelectListItem{ Text="GPAY", Value = "5" },
        new SelectListItem{ Text="PhonePe", Value = "6" },
        new SelectListItem{ Text="IMPS", Value = "7" },
        new SelectListItem{ Text="RTGS", Value = "8" },
     }, new { @class = "textbox-control col-md-2 col-xs", @readonly = "readonly" })
        }
        else
        {
            @Html.DropDownListFor(m => m.PaymentModeID, new List<SelectListItem>
{
     new SelectListItem{ Text="--Mode--", Value = "0"  },
    new SelectListItem{ Text="Cheque", Value = "1" },
    new SelectListItem{ Text="NEFT", Value = "2" },
    new SelectListItem{ Text="CC", Value = "3" },
    new SelectListItem{ Text="GPAY", Value = "5" },
    new SelectListItem{ Text="PhonePe", Value = "6" },
    new SelectListItem{ Text="IMPS", Value = "7" },
    new SelectListItem{ Text="RTGS", Value = "8" },
 }, new { @class = "textbox-control col-md-2 col-xs", @readonly = "readonly" })
        }

        @Html.LabelFor(m => m.ReferenceNo, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.ReferenceNo, new { @class = "textbox-control col-md-1 col-xs" })
        @Html.LabelFor(m => m.BookingAmount, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.BookingAmount, new { @class = "textbox-control col-md-1 col-xs" })
        @Html.LabelFor(m => m.GrandRate, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.GrandRate, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })
        @*@Html.LabelFor(m => m.BookingDate, new { @class = "col-md-1" })
            <div class="col-md-2" style="padding-left:0px">
                <input id="datepicker1" title="datepicker" />
            </div>
            @Html.LabelFor(m => m.ChequeDate, new { @class = "col-md-1" })
            <div class="col-md-2" style="padding-left:0px">
                <input id="cqDatePicker" title="datepicker" />
            </div>*@

    </div>
    <div class="row">
        @Html.LabelFor(m => m.BookingDate, new { @class = "col-md-1" })
        <div class="col-md-2" style="padding-left:0px">
            <input id="datepicker1" title="datepicker" />
        </div>
        @Html.LabelFor(m => m.ChequeDate, new { @class = "col-md-1" })
        <div class="col-md-2" style="padding-left:0px">
            <input id="cqDatePicker" title="datepicker" />
        </div>

        @Html.LabelFor(m => m.IBOShare, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.IBOShare, new { @class = "textbox-control col-md-1 col-xs" })
        @Html.LabelFor(m => m.CompanyShare, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.CompanyShare, new { @class = "textbox-control col-md-1 col-xs" })
        @*@Html.LabelFor(m => m.ChequeStatus, new { @class = "col-md-1" })
                    @Html.DropDownListFor(m => m.ChequeStatus, new List<SelectListItem>
            {
                 new SelectListItem{ Text="Not-Applicable", Value = "Not-Applicable"  },
                new SelectListItem{ Text="Received", Value = "Received" },
                new SelectListItem{ Text="Cleared", Value = "Cleared" },
                new SelectListItem{ Text="Bounced", Value = "Bounced" },
                new SelectListItem{ Text="Hold", Value = "Hold" },
                new SelectListItem{ Text="Cancelled", Value = "Cancelled" }
             }, new { @class = "textbox-control col-md-2 col-xs", @readonly = "readonly" })*@


    </div>
    <div class="row">
        @Html.LabelFor(m => m.DueDate, new { @class = "col-md-1" })
        @Html.TextBoxFor(m => m.DueDate, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })
        @Html.LabelFor(m => m.DueAmount, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.DueAmount, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })
        @Html.LabelFor(m => m.BalanceAmount, new { @class = "col-md-2" })
        @Html.TextBoxFor(m => m.BalanceAmount, new { @class = "textbox-control col-md-1 col-xs", @readonly = "readonly" })
        @Html.LabelFor(m => m.Remarks, new { @class = "col-md-2" })
        @Html.TextAreaFor(model => model.Remarks, new { @class = "textboxarea-control col-md-2 col-xs" })
    </div>
    <br />
    <hr />
    <br />
    <div class="row">

        <div class="col-md-6">
            <button type="submit" id="submitbtn" value="New" name="submit" class="btn btn-default orangebg pull-right"><i class="fa fa-check"></i>Book</button>
        </div>

    </div>
    @*<div class="row">

            <div style="float:right" class="col-md-6">
                <button type="submit" id="cancelbtn" value="Cancel" name="cancel" class="btn btn-default orangebg pull-right"><i class="fa fa-remove"></i>Cancel</button>
            </div>

        </div>*@
</div>

}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>


    var ClubHouseCharges;
    $("#datepicker1").kendoDatePicker();
    $("#cqDatePicker").kendoDatePicker();
    $(document).ready(function () {

        //$("#datepicker1").kendoDatePicker();
        //$("#cqDatePicker").kendoDatePicker();
        //dp.setOptions({ format: "MM-dd-yyyy });
        //var todayDate = kendo.toString(kendo.parseDate(new Date()), 'MM/dd/yyyy');
        //$("#datepicker1").data("kendoDatePicker").value(todayDate);
        var proID = '@TempData["ProjectID"]';
        var towerID = '@TempData["TowerID"]';
        var flatID = '@TempData["FlatID"]';
        var agentID1 = '@TempData["AgentID"]';
        var schemeID = '@TempData["SchemeID"]';
        var bookStatus = '@TempData["BookingStatus"]';
        var flatName = '@TempData["FlatName"]';
        var payMode = '@TempData["PayMode"]';
        var cqStatus = '@TempData["ChequeStatus"]';
        var state = '@TempData["State"]';
        var city = '@TempData["City"]';
        var bookingID = '@TempData["BookingID"]';
        var bookingDate = '@TempData["BookingDate"]';
        var cQDate = '@TempData["CQDate"]';
        if (bookingDate != null && bookingDate != '') {
            //alert(bookingDate);
            $("#datepicker1").data('kendoDatePicker').value(bookingDate);

        }
        if (cQDate != null && cQDate != '') {
            //alert(bookingDate);
            $("#cqDatePicker").data('kendoDatePicker').value(cQDate);
        }
        if (proID != 0) {
            // $("#ProjectID").val() = 1;
            document.getElementById('ProjectID').value = proID;
            //element.value = proID;
            $.get("/Booking/GetTowersforDashBoard", { ProjectId: $("#ProjectID").val() }, function (data) {
                $("#TowerID").empty();
                $("#TowerID").append("<option value='" + 0 + "'>" + "--Select Tower--" + "</option>")
                //$("#FlatID").empty();
                $("#FlatID").append("<option value='" + 0 + "'>" + "--Select Flat--" + "</option>")
                ClearTextFiels();
                $.each(data, function (index, row) {
                    if (row.TowerID != towerID) {
                        $("#TowerID").append("<option value='" + row.TowerID + "'>" + row.TowerName + "</option>")
                    }
                    else {
                        $("#TowerID").append("<option selected='selected' value='" + row.TowerID + "'>" + row.TowerName + "</option>")
                    }

                });
            });
            $.getJSON('/Cascade/GetAgents2', function (data) {
                $("#AgentID").empty();
                AgentList = data;
                $("#AgentID").append("<option value='" + 0 + "'>" + "--Select Agent--" + "</option>")
                $.each(data, function (index, row) {
                    //$("#AgentID").append("<option value='" + row.AgentID + "'>" + row.AgentName + "</option>")
                    if (row.AgentID != agentID1) {
                        $("#AgentID").append("<option value='" + row.AgentID + "'>" + row.AgentName + "</option>")
                    }
                    else {
                        $("#AgentID").append("<option selected='selected' value='" + row.AgentID + "'>" + row.AgentName + "</option>")
                    }
                });
            });
            $.get("/Booking/GetSchemes", { ProjectId: $("#ProjectID").val() }, function (data) {
                $("#SchemeID").empty();
                SchemeList = data;
                $("#SchemeID").append("<option value='" + 0 + "'>" + "--Select Scheme--" + "</option>")
                $.each(data, function (index, row) {
                    //$("#SchemeID").append("<option value='" + row.SchemeID + "'>" + row.SchemeName + "</option>")
                    if (row.SchemeID != schemeID) {
                        $("#SchemeID").append("<option value='" + row.SchemeID + "'>" + row.SchemeName + "</option>")
                    }
                    else {
                        $("#SchemeID").append("<option selected='selected' value='" + row.SchemeID + "'>" + row.SchemeName + "</option>")
                    }
                });
            });

            $.get("/Booking/GetFlats", { TowerId: towerID }, function (data) {
                //$("#TowerID").empty();
                //$("#TowerID").append("<option value='" + 0 + "'>" + "--Select Tower--" + "</option>")
                //$("#FlatID").empty();
                $("#FlatID").append("<option value='" + 0 + "'>" + "--Select Flat--" + "</option>")
                ClearTextFiels();
                $.each(data, function (index, row) {
                    if (index == 0) {
                        if (bookStatus == 'P') {
                            $("#FlatID").append("<option selected='selected' value='" + flatID + "'>" + flatName + "</option>")
                            document.getElementById('PaymentModeID').value = payMode;
                            //document.getElementById('ChequeStatus').value = cqStatus;
                            $("#ChequeStatus").val(cqStatus);
                            $("#BookingID").val(bookingID);
                            //document.getElementById('State').value = state;
                            //document.getElementById('City').value = city;
                            //$("#PaymentModeID").val(city);
                            //$("#State").val(state);
                            //$("#City").val(city);
                        }
                    }
                    if (row.FlatID != flatID) {
                    $("#FlatID").append("<option value='" + row.FlatID + "'>" + row.FlatName + "</option>")
                    }
                    else {
                    $("#FlatID").append("<option  selected='selected' value='" + row.FlatID + "'>" + row.FlatName + "</option>")

                    }
                });
            });
            //alert('' + flatID);

            $.get("/Booking/GetFlatDetails", { FlatId: flatID, ProjectId: proID }, function (data) {
                if (schemeID != 0) {

                }
                    $.each(data, function (index, row) {
                        $("#Floor").val(row.Floor);
                        $("#Bhk").val(row.Bhk);
                        //$("#HighRiseCharges").val(row.HighRiseCharges);
                        $("#Area").val(row.Sft);
                        //$("#MaintenanceCharges").val(row.Maintenance);
                        $("#Facing").val(row.Facing);
                        //$("#TotalRate").val(row.TotalRate);
                        $("#ClubHouseCharges").val(row.ClubHouseCharges);

                    });
                });

            $("#ProjectID").prop("disabled", true);
            $("#TowerID").prop("disabled", true);
            $("#FlatID").prop("disabled", true);
            $.get("/Cascade/GetStateList", { CountryId: $("#Country").val() }, function (data) {
                $("#State").empty();
                    $("#State").append("<option value='" + 0 + "'>" + "--Select State--" + "</option>")
                    $.each(data, function (index, row) {
                        if (row.StateID != state) {
                        $("#State").append("<option value='" + row.StateID + "'>" + row.StateName + "</option>")

                        }
                        else {
                        $("#State").append("<option selected='selected' value='" + row.StateID + "'>" + row.StateName + "</option>")

                        }
                    });
            });
            $.get("/Cascade/GetCityList", { StateId: state }, function (data) {
                    $.each(data, function (index, row) {
                        $("#City").empty();
                $("#City").append("<option value='" + 0 + "'>" + "--Select City--" + "</option>")
                        $.each(data, function (index, row) {
                            if (row.CityID != city) {
                                $("#City").append("<option value='" + row.CityID + "'>" + row.CityName + "</option>")
                            }
                            else {
                                $("#City").append("<option selected='selected' value='" + row.CityID + "'>" + row.CityName + "</option>")
                            }
                });
                    });
            });
        };

        $("#datepicker1").change(function () {
            DueDateCal();
        });
        function DueDateCal() {
            var date = new Date();
            var bdate = kendo.toString($("#datepicker1").data("kendoDatePicker").value(), 'MM/dd/yyyy');
            if (bdate != null) {
                var dueDate = addDays(bdate, DuePeriod);
                var dd = dueDate.getDate();
                var mm = dueDate.getMonth() + 1;
                var yyyy = dueDate.getFullYear();
                if (dd < 10) {
                    dd = '0' + dd;
                }

                if (mm < 10) {
                    mm = '0' + mm;
                }
                dueDate = mm + '/' + dd + '/' + yyyy;
                $("#DueDate").val(dueDate)
            }
            else {
                $("#DueDate").val('')
            }
        }
        function addDays(date, days) {
            var result = new Date(date);
            result.setDate(result.getDate() + days);
            return result;
        }

        $("#Country").change(function () {
            if ($("#Country").val() != '') {
                $.get("/Cascade/GetStateList", { CountryId: $("#Country").val() }, function (data) {
                    $("#State").empty();
                    $("#State").append("<option value='" + 0 + "'>" + "--Select State--" + "</option>")
                    $("#City").empty();
                    $("#City").append("<option value='" + 0 + "'>" + "--Select City--" + "</option>")
                    $.each(data, function (index, row) {
                        if (row.StateID != state.toString()) {
                        $("#State").append("<option value='" + row.StateID + "'>" + row.StateName + "</option>")

                        }
                        else {
                        $("#State").append("<option selected='selected' value='" + row.StateID + "'>" + row.StateName + "</option>")

                        }
                    });
                });
            }
            else {
                $("#State").empty();
                $("#State").append("<option value='" + 0 + "'>" + "--Select State--" + "</option>")
                $("#City").empty();
                $("#City").append("<option value='" + 0 + "'>" + "--Select City--" + "</option>")
            }
        })


        $("#State").change(function () {
            $.get("/Cascade/GetCityList", { StateId: $("#State").val() }, function (data) {
                $("#City").empty();
                $("#City").append("<option value='" + 0 + "'>" + "--Select City--" + "</option>")
                $.each(data, function (index, row) {
                    $("#City").append("<option value='" + row.CityID + "'>" + row.CityName + "</option>")
                });
            });
        });
        var levelID = 0;
        var AgentList;
        var SchemeList;
        $("#ProjectID").change(function () {

            $.get("/Booking/GetTowersforDashBoard", { ProjectId: $("#ProjectID").val() }, function (data) {
                $("#TowerID").empty();
                $("#TowerID").append("<option value='" + 0 + "'>" + "--Select Tower--" + "</option>")
                $("#FlatID").empty();
                $("#FlatID").append("<option value='" + 0 + "'>" + "--Select Flat--" + "</option>")
                ClearTextFiels();
                $.each(data, function (index, row) {
                    $("#TowerID").append("<option value='" + row.TowerID + "'>" + row.TowerName + "</option>")
                });
            });

            $.getJSON('/Cascade/GetAgents2', function (data) {
                $("#AgentID").empty();
                AgentList = data;
                $("#AgentID").append("<option value='" + 0 + "'>" + "--Select Agent--" + "</option>")
                $.each(data, function (index, row) {
                    $("#AgentID").append("<option value='" + row.AgentID + "'>" + row.AgentName + "</option>")
                });
            });

            $.get("/Booking/GetSchemes", { ProjectId: $("#ProjectID").val() }, function (data) {
                $("#SchemeID").empty();
                SchemeList = data;
                $("#SchemeID").append("<option value='" + 0 + "'>" + "--Select Scheme--" + "</option>")
                $.each(data, function (index, row) {
                    $("#SchemeID").append("<option value='" + row.SchemeID + "'>" + row.SchemeName + "</option>")
                });
            });

        });

        $("#TowerID").change(function () {
            $.get("/Booking/GetFlats", { TowerId: $("#TowerID").val() }, function (data) {
                //$("#TowerID").empty();
                //$("#TowerID").append("<option value='" + 0 + "'>" + "--Select Tower--" + "</option>")
                $("#FlatID").empty();
                $("#FlatID").append("<option value='" + 0 + "'>" + "--Select Flat--" + "</option>")
                ClearTextFiels();
                $.each(data, function (index, row) {
                    $("#FlatID").append("<option value='" + row.FlatID + "'>" + row.FlatName + "</option>")
                });
            });
        });
        var downPayment = 0;
        var downDuePeriod = 0;
        var DuePeriod = 0;
        var payPercentage = 0;

        $("#SchemeID").change(function () {
            var SortedSchemeList = SchemeList.filter(function (e) {
                return e.SchemeID == $("#SchemeID").val();
            });
            var sqftRate = SortedSchemeList[0].SqFtCost;
            $("#SftRate").val(sqftRate);
            toastr.options = {
                "closeButton": true,
            }
            toastr.options.timeOut = 10500;
            toastr.options.closeButton = true;
            downPayment = SortedSchemeList[0].DownPayment;
            downDuePeriod = SortedSchemeList[0].DownPaymentTimePeriod;
            DuePeriod = SortedSchemeList[0].PaymentTimePeriod;
            payPercentage = SortedSchemeList[0].PaymentPercentage;
            //toastr.info('Minimum Down Payment : ' + downPayment + '\n' + 'Down Payment Due Period : ' + downDuePeriod + ' days');

            
            DueDateCal();
            SetDueAmount();
            swal("Down Payment Info!", 'Minimum Down Payment : ' + downPayment + '\n' + 'Down Payment Due Period : ' + downDuePeriod + ' days', "info")
            toastr.options.timeOut = 2000;
            toastr.options.closeButton = false;
        });



        $("#FlatID").change(function () {

                if ($("#FlatID").val() != 0) {
                    $.get("/Booking/GetFlatDetails", { FlatId: $("#FlatID").val(), ProjectId: $("#ProjectID").val() }, function (data) {

                        $.each(data, function (index, row) {
                            $("#Floor").val(row.Floor);
                            $("#Bhk").val(row.Bhk);
                            //$("#HighRiseCharges").val(row.HighRiseCharges);
                            $("#Area").val(row.Sft);
                            //$("#MaintenanceCharges").val(row.Maintenance);
                            $("#Facing").val(row.Facing);
                            //$("#TotalRate").val(row.TotalRate);
                            $("#ClubHouseCharges").val(row.ClubHouseCharges);
                            //$("#OtherCharges").val('0');
                        });
                    });
                }
                else {
                    ClearTextFiels();
                }

        });

        function ClearTextFiels() {
            if (flatID == 0) {
                $("#Floor").val('');
                $("#Bhk").val('');
                $("#HighRiseCharges").val('');
                $("#Area").val('');
                //$("#MaintenanceCharges").val('');
                $("#Facing").val('');
                $("#TotalRate").val('');
                $("#FinalRate").val('');
                $("#GrandRate").val('');
                $("#BookingAmount").val('');
                $("#BalanceAmount").val('');
                $("#SftRate").val('');
                //$("#TotalRate").val('');
                $("#ClubHouseCharges").val('');
                //$("#OtherCharges").val(0);
            }
        }
        $("#PaymentModeID").change(function () {
            SetTotalRate();
            SetBalanceAmount();
            SetDueAmount();
        });
        $("#SftRate").keyup(function () {
            SetTotalRate();
            SetBalanceAmount();
            SetDueAmount();
        });

        $("#HighRiseCharges").keyup(function () {
            SetTotalRate();
            SetBalanceAmount();
            SetDueAmount();
        });

        $("#Discount").keyup(function () {
            SetTotalRate();
            SetBalanceAmount();
            SetDueAmount();
        });

        $("#OtherCharges").keyup(function () {
            SetTotalRate();
            SetBalanceAmount();
            SetDueAmount();
        });

        $("#BookingAmount").keyup(function () {
            SetBalanceAmount();
            SetDueAmount();
        });

        function SetTotalRate() {
            if ($("#SftRate").val() != '' && $("#HighRiseCharges").val() != '' && $("#Discount").val() != '') {
                $("#TotalRate").val(parseInt($("#SftRate").val()) + parseInt($("#HighRiseCharges").val()) - parseInt($("#Discount").val()));
                $("#FinalRate").val(parseInt($("#TotalRate").val()) * parseInt($("#Area").val()))
                if ($("#ClubHouseCharges").val() != '') {
                    $("#GrandRate").val(Math.floor(parseInt($("#FinalRate").val()) + parseInt($("#ClubHouseCharges").val())))
                }
                if ($("#OtherCharges").val() != '') {
                    $("#GrandRate").val(Math.floor(parseInt($("#FinalRate").val()) + parseInt($("#ClubHouseCharges").val()) + parseInt($("#OtherCharges").val())))
                }
               
                if ($("#PaymentModeID option:selected").val() != 4 && $("#PaymentModeID option:selected").val() != 0) {
                    var gstPercentage = 5.0;
                    var gstAmount = gstPercentage * (parseInt($("#FinalRate").val()) + parseInt($("#ClubHouseCharges").val())) / 100;
                    if ($("#OtherCharges").val() == '') {
                        $("#OtherCharges").val('0');
                    }
                    $("#GrandRate").val(Math.floor(parseInt($("#FinalRate").val()) + parseInt($("#ClubHouseCharges").val()) + parseInt($("#OtherCharges").val()) + gstAmount))
                    $("#GSTPercentage").val(gstPercentage);
                    $("#GSTAmount").val(gstAmount);
                }
                if ($("#PaymentModeID option:selected").val() == 4 && $("#PaymentModeID option:selected").val() == 0) {
                    var gstPercentage = 0.0;
                    var gstAmount = gstPercentage * (parseInt($("#FinalRate").val()) + parseInt($("#ClubHouseCharges").val())) / 100;
                    if ($("#OtherCharges").val() == '') {
                        $("#OtherCharges").val('0');
                    }
                    $("#GrandRate").val(Math.floor(parseInt($("#FinalRate").val()) + parseInt($("#ClubHouseCharges").val()) + parseInt($("#OtherCharges").val()) + gstAmount))
                    $("#GSTPercentage").val(gstPercentage);
                    $("#GSTAmount").val(gstAmount);
                }
            }
            else {
                $("#TotalRate").val('');
                $("#FinalRate").val('');
                $("#GrandRate").val('');
                $("#BookingAmount").val('');
                $("#BalanceAmount").val('');
                $("#GSTPercentage").val('');
                $("#GSTAmount").val('');
            }
        }


        function SetBalanceAmount() {
            if ($("#GrandRate").val() != '' && $("#BookingAmount").val() != '') {
                $("#BalanceAmount").val(parseInt($("#GrandRate").val()) - parseInt($("#BookingAmount").val()))
            }
            else {
                $("#BalanceAmount").val('')
            }
        }

        function SetDueAmount() {
            var SortedSchemeList = SchemeList.filter(function (e) {
                return e.SchemeID == $("#SchemeID").val();
            });
            var sqftRate = SortedSchemeList[0].SqFtCost;
            $("#SftRate").val(sqftRate);
            toastr.options = {
                "closeButton": true,
            }
            toastr.options.timeOut = 10500;
            toastr.options.closeButton = true;
            downPayment = SortedSchemeList[0].DownPayment;
            downDuePeriod = SortedSchemeList[0].DownPaymentTimePeriod;
            DuePeriod = SortedSchemeList[0].PaymentTimePeriod;
            payPercentage = SortedSchemeList[0].PaymentPercentage;

            if ($("#FinalRate").val() != '' && $("#BookingAmount").val() != '') {
                $("#DueAmount").val((parseInt($("#FinalRate").val()) * payPercentage)/100)
            }
            else {
                $("#DueAmount").val('')
            }
        }


        $("#submitbtn").submit(function () {
            Validations();
            if (validationsFlag) {
                SetHiddenFields();
                SetDueAmount();
            }
            //if (!$('#submitbtn').valid()) {
            //    $('#ValidationSummaryModal').modal('show');
            //}
        });

        function SetHiddenFields() {
            $("#ProjectName").val($("#ProjectID option:selected").text());
            $("#TowerName").val($("#TowerID option:selected").text());
            $("#FlatName").val($("#FlatID option:selected").text());
            $("#AgentName").val($("#AgentID option:selected").text());
            $("#CountryName").val($("#Country option:selected").text());
            $("#StateName").val($("#State option:selected").text());
            $("#CityName").val($("#City option:selected").text());
            $("#PaymentMode").val($("#PaymentModeID option:selected").text());
             var SortedAgentList = AgentList.filter(function (e) {
                return e.AgentID == $("#AgentID").val();
            });
            $("#Level").val(SortedAgentList[0].LevelID);
            $("#AgentParent").val(SortedAgentList[0].AgentParent);
            $("#SchemeName").val($("#SchemeID option:selected").text());
            $("#DownPaymentTimePeriod").val(downDuePeriod);
            $("#PaymentTimePeriod").val(DuePeriod);
            $("#ProjectID").prop("disabled", false);
            $("#TowerID").prop("disabled", false);
            $("#FlatID").prop("disabled", false);
            var fromDate = kendo.toString($("#datepicker1").data("kendoDatePicker").value(), 'MM/dd/yyyy');
            var chequeDate = kendo.toString($("#cqDatePicker").data("kendoDatePicker").value(), 'MM/dd/yyyy');
            //alert(fromDate);
            $("#BookingDate").val(fromDate);
            $("#ChequeDateMod").val(chequeDate);
            $("#SchemePercentage").val(payPercentage);
        };
        var validationsFlag = false;

        function Validations() {


            if ($("#Name").val() == '') {
                //toastr.error("Name is Required");
                swal("Name is Required!", "", "warning")
                return;
            }
            if ($("#Country").val() == '') {
                toastr.error("Country is Required"); return;
            }
            if ($("#State").val() == '0') {
                toastr.error("State is Required"); return;
            }
            if ($("#City").val() == '0') {
                toastr.error("City is Required"); return;
            }

            if ($("#datepicker1").data("kendoDatePicker").value() == null || $("#datepicker1").data("kendoDatePicker").value() == '') {
                toastr.error("Please select Booking Date");
                return;
            }
            //if ($("#Nominee").val() == '') {
            //    toastr.error("Nominee is Required"); return;
            //}
            //if ($("#Relationship").val() == '') {
            //    toastr.error("Relationship is Required"); return;
            //}
            //if ($("#Age").val() == '') {
            //    toastr.error("Age is Required"); return;
            //}
            //if ($("#Dob").val() == '0') {
            //    toastr.error("Dob is Required"); return;
            //}
            //if ($("#Aadhar").val() == '') {
            //    toastr.error("Aadhar is Required"); return;
            //}
            //if ($("#Pan").val() == '') {
            //    toastr.error("Pan is Required"); return;
            //}
            //if ($("#Address").val() == '') {
            //    toastr.error("Address is Required"); return;
            //}
            //if ($("#Pincode").val() == '') {
            //    toastr.error("Pincode is Required"); return;
            //}
            if ($("#Mobile").val() == '') {
                toastr.error("Mobile is Required"); return;
            }
            if ($("#Email").val() == '') {
                toastr.error("Mobile is Required"); return;
            }
            if ($("#ProjectID").val() == '0') {
                toastr.error("Project is Required"); return;
            }
            if ($("#TowerID").val() == '0') {
                toastr.error("Tower is Required"); return;
            }
            if ($("#FlatID").val() == '0') {
                toastr.error("Flat is Required"); return;
            }
            if ($("#SftRate").val() == '') {
                toastr.error("SftRate is Required"); return;
            }
            if ($("#HighRiseCharges").val() == '') {
                toastr.error("High Rise charge is Required"); return;
            }
            if ($("#Discount").val() == '') {
                toastr.error("Discount is Required"); return;
            }
            if ($("#TotalRate").val() == '') {
                toastr.error("Total Rate is Required"); return;
            }

            if ($("#FinalRate").val() == '') {
                toastr.error("Final Rate is Required"); return;
            }
            if ($("#Discount").val() == '') {
                toastr.error("Discount is Required"); return;
            }
            if ($("#TotalRate").val() == '') {
                toastr.error("Total Rate is Required"); return;
            }
            if ($("#BookingAmount").val() == '') {
                toastr.error("Booking Amount Required"); return;
            }
             if ($("#AgentID").val() == '0') {
                 swal("Agent is Required!", "", "warning")
                 //$("#AgentID").val() = null;
                return;
            }
            if ($("#PaymentModeID option:selected").val() == '0') {
                toastr.error("Please select payment option"); return;
            }
            if ($("#ReferenceNo").val() == '') {
                toastr.error("Please enter reference no"); return;
            }
            validationsFlag = true;
        }

    });
</script>

<script type="text/javascript">
    $(window).load(function () {
        var tempdataval = '@TempData["successmessage"]';
        if (tempdataval != '') {
            if (tempdataval == 'Booking Successfull')
                toastr.success(tempdataval);
            else {
                toastr.error(tempdataval);
            }
        }

    });
</script>

<style>
    .validation-summary-errors {
        font-size: 12px;
        font-family: 'OpenSans normal', sans-serif;
        font-weight: bold !important;
        color: red !important;
    }
</style>
