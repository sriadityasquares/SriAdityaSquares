@model ModelLayer.DailyExpense
@{
    ViewBag.DailyExpense = "active";
    ViewBag.Title = "Daily Expenses";
    var message = TempData["successmessage"] ?? string.Empty;
    ViewBag.Admin = "active";
}
<style>

    @@media (min-width: 768px) {

        .container {
            margin-left: 350px;
        }

        .jumbotron {
            width: 1700px;
        }
    }
</style>



@using (Html.BeginForm("DailyExpenses", "Booking", FormMethod.Post, new
{

    role = "form",
    id = "submitbtn",
    enctype = "multipart/form-data"

}))
{
    @Html.HiddenFor(x => x.ExpenseDate)
    @Html.HiddenFor(x => x.ProjectName)
    @Html.HiddenFor(x => x.SubCategory)
    <div class="jumbotron">

        <div class="row">
            <div class="col-md-12 col-xs" style="margin-top:0px">
                <h3 style="margin-top:0px;margin-bottom:4px" align="left">ADD DAILY EXPENSES</h3>
                <div class="specialLine col-md-1"></div>
            </div>

        </div>
        <div class="row">
            <div id="radiodiv" class="col-md-4 col-xs">

                <div class="radios">
                    <div class="radio" style="margin-top:0px">
                        <input type="radio" id="radio1" value="1" name="radio" checked="checked">
                        <label for="radio1">
                            <div class="checker"></div>
                            Single
                        </label>
                    </div>

                    <div class="radio">
                        <input type="radio" id="radio2" value="2" name="radio">
                        <label for="radio2">
                            <div class="checker"></div>
                            Bulk Upload
                        </label>
                    </div>


                </div>
            </div>
        </div>
        <div id="single">


            <div class="row" style="padding-top:10px">
                @Html.LabelFor(m => m.PaidTo, new { @class = "col-md-2" })
                @Html.TextBoxFor(model => model.PaidTo, new { @class = "textbox-control col-md-4 col-xs" })
                @Html.LabelFor(m => m.ExpenseDate, new { @class = "col-md-2" })
                <div class="col-md-2" style="padding-left:0px">
                    <input id="datepicker1" title="datepicker" />
                </div>

            </div>
            <div class="row" style="padding-top:10px">
                @Html.LabelFor(m => m.ExpenseType, new { @class = "col-md-2" })
                @Html.DropDownListFor(m => m.ExpenseType, new List<SelectListItem>
                {
                    new SelectListItem{ Text="--Expense Type--", Value = "--Expense Type--"  },
                    new SelectListItem{ Text="General Expense", Value = "General Expense" },
                    new SelectListItem{ Text="Project Expense", Value = "Project Expense" },
                 }, new { @class = "textbox-control col-md-2 col-xs" })
                <div id="projectShow">
                    @Html.LabelFor(m => m.ProjectID, new { @class = "col-md-1" })
                    @Html.DropDownListFor(model => model.ProjectID, TempData["ProjectList"] as SelectList, "--Select Project--", new { @class = "textbox-control col-md-2 col-xs" })
                    @Html.LabelFor(m => m.SubCategoryID, new { @class = "col-md-1" })
                    @Html.DropDownListFor(model => model.SubCategoryID, TempData["ExpenseCategoryList"] as SelectList, "--Select Sub-Category--", new { @class = "textbox-control col-md-2 col-xs" })
                </div>
            </div>

            <div class="row">
                @Html.LabelFor(m => m.Particulars, new { @class = "col-md-2" })
                @Html.TextAreaFor(model => model.Particulars, new { @class = "textboxarea-control col-md-8 col-xs" })


            </div>
            <div style="padding-top:10px" class="row">
                @Html.LabelFor(m => m.Amount, new { @class = "col-md-2" })
                @Html.TextBoxFor(model => model.Amount, new { @class = "textbox-control col-md-3 col-xs" })

                @Html.LabelFor(m => m.PaymentMode, new { @class = "col-md-2" })
                @Html.DropDownListFor(m => m.PaymentMode, new List<SelectListItem>
           {
                new SelectListItem{ Text="--Mode--", Value = "--Mode--"  },
               new SelectListItem{ Text="Cheque", Value = "Cheque" },
               new SelectListItem{ Text="NEFT", Value = "NEFT" },
                new SelectListItem{ Text="RTGS", Value = "RTGS" },
               new SelectListItem{ Text="CC", Value = "CC" },
               new SelectListItem{ Text="Online", Value = "Online" },
                new SelectListItem{ Text="IMPS", Value = "IMPS" },
               new SelectListItem{ Text="UPI", Value = "UPI" },
               new SelectListItem{ Text="Cash", Value = "Cash" },
               new SelectListItem{ Text="Others", Value = "Others" },
            }, new { @class = "textbox-control col-md-3 col-xs" })

            </div>
            <div class="row">
                @Html.LabelFor(m => m.ChequeNo, new { @class = "col-md-2" })
                @Html.TextBoxFor(model => model.ChequeNo, new { @class = "textbox-control col-md-3 col-xs" })
                @Html.LabelFor(m => m.Comments, new { @class = "col-md-2" })
                @Html.TextAreaFor(model => model.Comments, new { @class = "textboxarea-control col-md-3 col-xs" })
                @*@Html.LabelFor(m => m.TransactionType, new { @class = "col-md-2" })
             @Html.DropDownListFor(m => m.TransactionType, new List<SelectListItem>
        {
            new SelectListItem{ Text="Credit", Value = "Credit" },
            new SelectListItem{ Text="Debit", Value = "Debit" },
         }, new { @class = "textbox-control col-md-3 col-xs" })*@

            </div>
        </div>
        <div id="bulk">
            <div class="row" style="padding-TOP:20px">
                <div class="col-md-3">
                    <label>BULK UPLOAD EXPENSES:</label>
                </div>
                <div class="col-md-3">
                    <input class="form-control" type="file" name="BulkUpload" id="BulkUpload" />
                </div>


            </div>
        </div>
        <div class="row" style="padding-top:5px;">
            <div class="col-sm-3 no-pad">
                <button type="submit" id="submitbtn" value="New" class="btn btn-default orangebg pull-right"><i class="fa fa-dollar"></i>ADD</button>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 col-xs" style="margin-top:0px">
                <h3 style="margin-top:0px;margin-bottom:4px" align="left">DAILY EXPENSES</h3>
                <div class="specialLine col-md-1"></div>
            </div>

        </div>
        <div id="grid"></div>
    </div>
}

<script>

    $("#bulk").hide();
    $('input[type=radio][name=radio]').change(function () {
        if (this.value == 1) {
            $("#bulk").hide();
            $("#single").show();
        }
        if (this.value == 2) {
            $("#bulk").show();
            $("#single").hide();
        }

    });

    $("#projectShow").hide();

    $("#ExpenseType").change(function () {
        var value = $("#ExpenseType").val();
        if (value == 'Project Expense') {
            $("#projectShow").show();
        }
        else {
            $("#projectShow").hide();
        }
    });
    $("#datepicker1").kendoDatePicker({ format: "dd/MM/yyyy" });
    var todayDate = kendo.toString(kendo.parseDate(new Date()), 'dd/MM/yyyy');
    $("#datepicker1").val(todayDate);
    $("#ProjectID").change(function () {
        $.get("/Booking/GetTowers", { ProjectId: $("#ProjectID").val() }, function (data) {
            //HideDiv();
            $("#TowerID").empty();
            $("#TowerID").append("<option value='" + 0 + "'>" + "--Select Tower--" + "</option>")
            $("#FlatID").empty();
            $("#FlatID").append("<option value='" + 0 + "'>" + "--Select Flat--" + "</option>")
            $.each(data, function (index, row) {
                $("#TowerID").append("<option value='" + row.TowerID + "'>" + row.TowerName + "</option>")
            });
        });
    });

    $("#TowerID").change(function () {

        $.get("/Booking/GetFlatsExceptOpen", { TowerID: $("#TowerID").val() }, function (data) {
            //$("#TowerID").empty();
            //$("#TowerID").append("<option value='" + 0 + "'>" + "--Select Tower--" + "</option>")
            //HideDiv();
            $("#FlatID").empty();
            $("#FlatID").append("<option value='" + 0 + "'>" + "--Select Flat/Villa--" + "</option>")
            $.each(data, function (index, row) {
                $("#FlatID").append("<option value='" + row.FlatID + "'>" + row.FlatName + "</option>")
            });
        });
    });
    $("#submitbtn").submit(function () {

        SetHiddenFields();

    });

    function SetHiddenFields() {
        
        $("#ExpenseDate").val($("#datepicker1").val());
        $("#ProjectName").val($("#ProjectID option:selected").text());
        $("#SubCategory").val($("#SubCategoryID option:selected").text());
    }


    $(window).load(function () {
        var tempdataval = '@TempData["successmessage"]';
        if (tempdataval != '') {
            if (tempdataval == 'Expense Added Successfully')
                toastr.success(tempdataval);
            else {
                toastr.error(tempdataval);
            }
        }

    });



    $(document).ready(function () {
        dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Booking/GetDailyExpenses",
                    contentType: "application/json",
                    dataType: "json",
                    type: "POST"
                },
                update: {
                    url: "/Booking/UpdateDailyExpenses",
                    dataType: "json",
                    complete: function (jqXhr, textStatus) {
                        if (textStatus == 'success') {
                            toastr.success('Update Successfull');
                            $("#grid").data("kendoGrid").dataSource.read();

                        }
                        else {
                            toastr.error('Error in Updating');
                            $("#grid").data("kendoGrid").dataSource.read();
                        }
                    }
                },
                destroy: {
                    url: "/Booking/DeleteDailyExpense",
                    dataType: "json",
                    complete: function (jqXhr, textStatus) {
                        if (textStatus == 'success') {
                            toastr.success('Deleted Successfull');
                            $("#grid").data("kendoGrid").dataSource.read();
                        }
                        else {
                            toastr.error('Error in Deleting');
                            $("#grid").data("kendoGrid").dataSource.read();
                        }
                    }
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                }
            },
            batch: true,
            pageSize: 5,
            schema: {
                model: {
                    id: "ExpenseID",
                    fields: {
                        ExpenseID: { editable: false, nullable: true },
                        ExpenseDate :  { type: "date" }
                    }
                }
            }
        });

        $('.k-icon k-i-edit').toggleClass('.k-icon k-i-edit');
        $("#grid").kendoGrid({
            dataSource: dataSource,
            pageable: true,
            height: 350,
            toolbar: ["search", "excel"],
            excel: {
                fileName: "DailyExpenses.xlsx",

                //proxyURL: "https://demos.telerik.com/kendo-ui/service/export",
                filterable: true,
                allPages: true
            },
            excelExport: function (e) {
                var sheet = e.workbook.sheets[0];

                for (var rowIndex = 1; rowIndex < sheet.rows.length; rowIndex++) {
                    var row = sheet.rows[rowIndex];
                    for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
                        row.cells[0].format = "dd/MM/yyyy"
                    }
                }
            },
            columns: [
                { field: "ExpenseDate", title: "Expense Date", width: "120px", template: '#= kendo.toString(kendo.parseDate(ExpenseDate), "dd/MM/yyyy")#' },
                { field: "PaidTo", title: "Paid To", width: "120px" },
                { field: "ExpenseType", title: "Expense Type", width: "120px" },
                { field: "ProjectName", title: "ProjectName", width: "120px" },
                { field: "SubCategory", title: "SubCategory", width: "120px" },

                { field: "Particulars", title: "Particulars", width: "120px" },
                { field: "Amount", title: "Amount", width: "100px" },
                { field: "PaymentMode", title: "Mode of Payment", width: "120px" },
                { field: "ChequeNo", title: "ChequeNo", width: "120px" },
                { field: "Comments", title: "Comments", width: "100px" },
                { command: ["edit","destroy"], title: "&nbsp;", width: "100px" }
            ],
            editable: "inline"
        });


    });

</script>
