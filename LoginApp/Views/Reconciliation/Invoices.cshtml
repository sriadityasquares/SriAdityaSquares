@model ModelLayer.Invoice
@{
    ViewBag.Invoices = "active";
    ViewBag.Title = "Invoice";
    var message = TempData["successmessage"] ?? string.Empty;
    ViewBag.Recon = "active";
}
<style>

    @@media (min-width: 768px) {

        .container {
            margin-left: 350px;
        }

        .jumbotron {
            width: 1700px;
        }
    }
</style>



@using (Html.BeginForm("Invoices", "Reconciliation", FormMethod.Post, new
{

    role = "form",
    id = "submitbtn",
    enctype = "multipart/form-data"

}))
{

    <div class="jumbotron">
        @Html.HiddenFor(x => x.InvoiceDetails)
        @Html.HiddenFor(x => x.InvDate)
        @Html.HiddenFor(x => x.ProjectName)
        <div class="row">
            <div class="col-md-12 col-xs" style="margin-top:0px">
                <h3 style="margin-top:0px;margin-bottom:4px" align="left">ADD INVOICE</h3>
                <div class="specialLine col-md-1"></div>
            </div>

        </div>
        <div class="row" style="padding-top:10px">
            @Html.LabelFor(m => m.SupplierID, new { @class = "col-md-2" })
            @Html.DropDownListFor(model => model.SupplierID, TempData["SupplierList"] as SelectList, "--Select Supplier--", new { @class = "textbox-control col-md-2 col-xs" })
            @Html.LabelFor(m => m.InvoiceNo, new { @class = "col-md-1" })
            @Html.TextBoxFor(model => model.InvoiceNo, new { @class = "textbox-control col-md-2 col-xs" })
            @Html.LabelFor(m => m.QuotationNo, new { @class = "col-md-1" })
            @Html.TextBoxFor(model => model.QuotationNo, new { @class = "textbox-control col-md-2 col-xs" })
        </div>
        <div class="row" style="padding-top:10px">
            @Html.LabelFor(m => m.ExpenseType, new { @class = "col-md-2" })
            @Html.DropDownListFor(m => m.ExpenseType, new List<SelectListItem>
      {
           new SelectListItem{ Text="--Expense Type--", Value = ""  },
          new SelectListItem{ Text="General", Value = "General" },
          new SelectListItem{ Text="Project", Value = "Project" },
           new SelectListItem{ Text="Other", Value = "Other" },

       }, new { @class = "textbox-control col-md-2 col-xs" })
            @Html.LabelFor(m => m.ProjectID, new { @class = "col-md-1" })
            @Html.DropDownListFor(model => model.ProjectID, TempData["ProjectList"] as SelectList, "--Select Project--", new { @class = "textbox-control col-md-2 col-xs", @readonly = "readonly" })

            @Html.LabelFor(m => m.InvoiceDate, new { @class = "col-md-1" })
            <div class="col-md-2" style="padding-left:0px">
                <input id="datepicker1" title="datepicker" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-9" style="padding-left:250px;padding-top:30px;">
                <div id="grid"></div>
            </div>


        </div>
        <div class="row" style="padding-top:30px">
            @Html.LabelFor(m => m.TotalValue, new { @class = "col-md-2" })
            @Html.TextBoxFor(model => model.TotalValue, new { @class = "textbox-control col-md-1 col-xs" })
            @Html.LabelFor(m => m.CGSTPercentage, new { @class = "col-md-1" })
            @Html.TextBoxFor(model => model.CGSTPercentage, new { @class = "textbox-control col-md-1 col-xs" })
            @Html.LabelFor(m => m.SGSTPercentage, new { @class = "col-md-1" })
            @Html.TextBoxFor(model => model.SGSTPercentage, new { @class = "textbox-control col-md-1 col-xs" })
            @Html.LabelFor(m => m.IGSTPercentage, new { @class = "col-md-1" })
            @Html.TextBoxFor(model => model.IGSTPercentage, new { @class = "textbox-control col-md-1 col-xs" })
        </div>
        <div class="row" style="padding-top:10px">
            @Html.LabelFor(m => m.CGST, new { @class = "col-md-2" })
            @Html.TextBoxFor(model => model.CGST, new { @class = "textbox-control col-md-1 col-xs" })
            @Html.LabelFor(m => m.SGST, new { @class = "col-md-1" })
            @Html.TextBoxFor(model => model.SGST, new { @class = "textbox-control col-md-1 col-xs" })
            @Html.LabelFor(m => m.IGST, new { @class = "col-md-1" })
            @Html.TextBoxFor(model => model.IGST, new { @class = "textbox-control col-md-1 col-xs" })
            @Html.LabelFor(m => m.NetValue, new { @class = "col-md-1" })
            @Html.TextBoxFor(model => model.NetValue, new { @class = "textbox-control col-md-1 col-xs" })
        </div>
        <div class="row" style="padding-top:5px;">
            <div class="col-sm-3 no-pad">
                <button type="submit" id="submitbtn" value="New" class="btn btn-default orangebg pull-right"><i class="fa fa-dollar"></i>ADD</button>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12 col-xs" style="margin-top:0px">
                <h3 style="margin-top:0px;margin-bottom:4px" align="left">INVOICES</h3>
                <div class="specialLine col-md-1"></div>
            </div>

        </div>
        <div id="grid1"></div>


        <div id="example">

            <div class="row">

                @Html.Label("Select Page size", new { @class = "col-md-4" })
                <div class="col-md-3">
                    <select id="paper" style="width: 100px;">
                        <option value="size-a4" selected>A4</option>
                        <option value="size-letter">Letter</option>
                        <option value="size-executive">Executive</option>
                    </select>
                </div>

                <button class="btn-success" onclick="getPDF('.pdf-page')">Download Receipt</button>


            </div>

            <div id="scrollPagePDF" style="overflow:auto;height:500px" class="page-container hidden-on-narrow">

                <div id="bgImage" style="background-size: cover;" class="pdf-page size-a4">
                    <div class="inner-page">

                        <br />

                        <br />
                        <br />
                        <div id="content">

                        </div>


                        <div class="pdf-footer">
                            <p style="color:black" class="mb-0">
                                <b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3rd floor,above Nissan showroom,peddamma temple metro station,Jubilee Hills,Hyderabad, 500033</b>
                            </p>
                        </div>
                    </div>
                </div>

                <div class="responsive-message"></div>

                <style>
                    /*
                        Use the DejaVu Sans font for display and embedding in the PDF file.
                        The standard PDF fonts have no support for Unicode characters.
                    */
                    .pdf-page {
                        font-family: "DejaVu Sans", "Arial", sans-serif;
                    }
                </style>

                <script>
                    // Import DejaVu Sans font for embedding

                    // NOTE: Only required if the Kendo UI stylesheets are loaded
                    // from a different origin, e.g. cdn.kendostatic.com
                    kendo.pdf.defineFont({
                        "DejaVu Sans": "https://kendo.cdn.telerik.com/2016.2.607/styles/fonts/DejaVu/DejaVuSans.ttf",
                        "DejaVu Sans|Bold": "https://kendo.cdn.telerik.com/2016.2.607/styles/fonts/DejaVu/DejaVuSans-Bold.ttf",
                        "DejaVu Sans|Bold|Italic": "https://kendo.cdn.telerik.com/2016.2.607/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf",
                        "DejaVu Sans|Italic": "https://kendo.cdn.telerik.com/2016.2.607/styles/fonts/DejaVu/DejaVuSans-Oblique.ttf",
                        "WebComponentsIcons": "https://kendo.cdn.telerik.com/2017.1.223/styles/fonts/glyphs/WebComponentsIcons.ttf"
                    });
                </script>



                <script>
                function getPDF(selector) {
                    kendo.drawing.drawDOM($(selector)).then(function (group) {
                        kendo.drawing.pdf.saveAs(group, "PaymentReceipt.pdf");
                    });
                }
                $('#example').hide();


                $("#paper").kendoDropDownList({
                    change: function () {
                        $(".pdf-page")
                            .removeClass("size-a4")
                            .removeClass("size-letter")
                            .removeClass("size-executive")
                            .addClass(this.value());
                    }
                });


                function GetReceipt(paymentID) {
                    //alert(paymentID);

                    $('#example').show();
                    $.get("/Booking/GetPaymentReceipts", { paymentID: paymentID }, function (data) {
                        $("#content").empty();
                        $("#content").append(data);
                        $('#example').show();

                        //$("#bgImage").css("background-image", "url('../../Content/Images/'@TempData["BackgroundURL"]')");
                        @*var imageUrl = "../../Content/Images/" + "'@TempData["BackgroundURL"]'";
                        var imageUrl1 = "../../Content/Images/@ViewBag.BackgroundURL";
                        $("#bgImage").css("background-image", "url(" + imageUrl1 + ")");*@
                    });

                }


                </script>
                <style>
                    .pdf-page {
                        position: relative;
                        margin: 0 auto;
                        padding: .4in .3in;
                        color: #333;
                        background-color: #fff;
                        box-shadow: 0 5px 10px 0 rgba(0,0,0,.3);
                        box-sizing: border-box;
                    }

                    .pdf-header {
                        padding-bottom: .2in;
                        margin-bottom: .3in;
                        /*border-bottom: 1px solid #e5e5e5;*/
                    }

                    .invoice-number {
                        padding-top: .1in;
                        float: right;
                    }

                    .pdf-footer {
                        position: absolute;
                        bottom: .25in;
                        left: .3in;
                        right: .3in;
                        padding-top: 0.05in;
                        border-top: 1px solid #e5e5e5;
                        font-size: 0.9em;
                        text-align: left;
                        color: #787878;
                    }

                    .addresses {
                        font-size: 12px;
                    }

                        .addresses:after {
                            display: block;
                            content: "";
                            clear: both;
                        }

                    .for {
                        float: left;
                    }

                    .from {
                        float: right;
                    }

                    .addresses p {
                        color: #787878;
                        padding: .05in 0;
                        border-top: 1px solid #e5e5e5;
                    }

                        .addresses p:first-of-type {
                            border-top: 0;
                        }

                    .pdf-body {
                        margin-top: .3in;
                    }

                    .company-logo {
                        font-size: 1.8em;
                        font-weight: bold;
                        color: #3aabf0;
                    }

                    .signature {
                        padding-top: .3in;
                    }

                    /* Dimensions other than px and em should be divided by 1.33 for the proper PDF output */
                    .size-a4 {
                        width: 6.2in;
                        height: 8.7in;
                    }

                    .size-letter {
                        width: 6.3in;
                        height: 8.2in;
                    }

                    .size-executive {
                        width: 5.4in;
                        height: 7.8in;
                        font-size: 12px;
                    }

                        .size-executive .pdf-header {
                            margin-bottom: .1in;
                        }
                </style>

            </div>
        </div>
    </div>
}
<script>

    $(window).load(function () {
        var tempdataval = '@TempData["successmessage"]';
        if (tempdataval != '') {
            if (tempdataval == 'Invoice Added Successfully')
                toastr.success(tempdataval);
            else {
                toastr.error(tempdataval);
            }
        }

    });



    $(document).ready(function () {
        dataSource1 = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Reconciliation/GetInvoices",
                    contentType: "application/json",
                    dataType: "json",
                    type: "POST"
                },
                update: {
                    url: "/Reconciliation/UpdateInvoice",
                    dataType: "json",
                    complete: function (jqXhr, textStatus) {
                        if (textStatus == 'success') {
                            toastr.success('Update Successfull');
                            $("#grid1").data("kendoGrid").dataSource.read();

                        }
                        else {
                            toastr.error('Error in Updating');
                            $("#grid1").data("kendoGrid").dataSource.read();
                        }
                    }
                },
                //destroy: {
                //    url: "/Booking/DeleteDailyExpense",
                //    dataType: "json",
                //    complete: function (jqXhr, textStatus) {
                //        if (textStatus == 'success') {
                //            toastr.success('Deleted Successfull');
                //            $("#grid").data("kendoGrid").dataSource.read();
                //        }
                //        else {
                //            toastr.error('Error in Deleting');
                //            $("#grid").data("kendoGrid").dataSource.read();
                //        }
                //    }
                //},
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                }
            },
            batch: true,
            pageSize: 5,
            schema: {
                model: {
                    id: "ID",
                    fields: {
                        ID: { editable: false, nullable: true },
                        InvoiceNo: { editable: true, nullable: true },
                        QuotationNo: { editable: false, nullable: true },
                        SupplierID: { editable: false, nullable: true },
                        SupplierName: { editable: false, nullable: true },
                        InvDate: { editable: false, nullable: true },
                        ExpenseType: { editable: false, nullable: true },
                        ProjectName: { editable: false, nullable: true },
                        TotalValue: { editable: false, nullable: true },
                        CGST: { editable: false, nullable: true },
                        SGST: { editable: false, nullable: true },
                        IGST: { editable: false, nullable: true },
                        NetValue: { editable: false, nullable: true },
                    }
                }
            }
        });

        $('.k-icon k-i-edit').toggleClass('.k-icon k-i-edit');
        $("#grid1").kendoGrid({
            dataSource: dataSource1,
            pageable: true,
            height: 350,
            toolbar: ["search", "excel"],
            excel: {
                fileName: "Invoices.xlsx",

                //proxyURL: "https://demos.telerik.com/kendo-ui/service/export",
                filterable: true,
                allPages: true
            },
            columns: [




                { field: "InvoiceNo", title: "Invoice No", width: "100px" },
                { field: "QuotationNo", title: "Quotation No", width: "100px" },
                { field: "SupplierID", title: "Supplier ID", width: "100px" },
                { field: "SupplierName", title: "Supplier Name", width: "140px" },
                { field: "SupplierPhone", title: "Supplier Phone", width: "120px" },
                { field: "InvDate", title: "Invoice Date", width: "100px" },
                { field: "ExpenseType", title: "Expense Type", width: "120px" },
                { field: "ProjectName", title: "Project", width: "100px" },
                { field: "TotalValue", title: "Total Value", width: "100px" },
                { field: "CGST", title: "CGST", width: "100px" },
                { field: "SGST", title: "SGST", width: "100px" },
                { field: "IGST", title: "IGST", width: "100px" },
                { field: "NetValue", title: "Net Value", width: "100px" },
                { command: [{ text: "Print Invoice", click: showDetails },"edit"], title: " ", width: "180px" }

            ],
            editable: "inline"
        });


    });

    $("#bgImage").css("background-image", "url('../../Content/Images/letterhead_new.jpg')");


    function showDetails(e) {


        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var tableResult = "";



        var html = "<article style=\"margin-bottom: 10px;\"><address></address><table class=\"meta\" style=\"margin-bottom: 0px;\"><tr><th>Date:</th><td><span contenteditable>" + dataItem.InvDate + "</span></td></tr><tr><th>Invoice No</th><td><span contenteditable>" + dataItem.InvoiceNo + "</span ></td ></tr ><tr><th>Quotation</th><td><span contenteditable>" + dataItem.QuotationNo + "</span ></td ></tr ><tr><th>Project</th><td><span contenteditable>" + dataItem.ProjectName + "</span ></td ></tr ><tr><th>Expenditure</th><td><span contenteditable>" + dataItem.ExpenseType + "</span ></td ></tr ></tbody ></table > <table class=\"inventory\" style=\"margin-bottom: 0px;\"><tbody><tr><th>Supplier ID</th><td colspan='5'>" + dataItem.SupplierID + "</td ></tr > <tr><th>Name</th><td colspan='5'>" + dataItem.SupplierName + "</td ></tr ><tr><th>Phone No</th><td colspan='5'>" + dataItem.SupplierPhone + "</td></tr></tbody></table ></article>";
        var tableResultFooter = "<tr><th colspan='4'><b>Total Value</b></th><td>&#8377;." + dataItem.TotalValue + "</td></tr><tr><th colspan='3'><b>CGST (+)</b></th><td>" + dataItem.CGSTPercentage + " %</td><td>&#8377;." + dataItem.CGST + "</td></tr><tr><th colspan='3'><b>SGST (+)</b></th><td>" + dataItem.SGSTPercentage + " %</td><td>&#8377;." + dataItem.SGST + "</td></tr><tr><th colspan='3'><b>IGST (+)</b></th><td>" + dataItem.IGSTPercentage + " %</td><td>&#8377;." + dataItem.IGST + "</td></tr><tr><th colspan='4'><b>Net Value to be paid</th><td>&#8377;.</b>" + dataItem.NetValue + "</td></tr></tbody> ";
        
        $.get("/Reconciliation/GetInvoiceDetails", { QuotationNo: dataItem.QuotationNo }, function (data) {
            $("#content").empty();
            var finalHtml = html + data + tableResultFooter; 
            $("#content").append(finalHtml);
            var selector = ".pdf-page";
            $('#example').show();
            kendo.drawing.drawDOM($(selector)).then(function (group) {
                style = 'height:50px'
                kendo.drawing.pdf.saveAs(group, "Invoice.pdf");
                $('#example').hide();
            });
        });
        

        
       

    }

    $("#ProjectID").prop("disabled", true);

    $("#ExpenseType").change(function () {
        if ($(this).val() == 'Project') {
            $("#ProjectID").prop("disabled", false);
        } else {
            $("#ProjectID").prop("disabled", true);
        }
    });


    $("#CGSTPercentage").keyup(function () {
        UpdateSGST();
        UpdateTotal();
        UpdateGST();
        
    });

    $("#SGSTPercentage").keyup(function () {
        UpdateCGST();
        UpdateTotal();
        UpdateGST();
    });

    function UpdateSGST() {
        $("#SGSTPercentage").val($("#CGSTPercentage").val());
    }

    function UpdateCGST() {
        $("#CGSTPercentage").val($("#SGSTPercentage").val());
    }

    $("#IGSTPercentage").keyup(function () {
        UpdateTotal();
        UpdateGST();
    });
    var validationsFlag = false;

    

    $("#submitbtn").submit(function (e) {
        UpdateTotal();
        UpdateGST();
        SetHiddenFields();
        Validations(e);
        
    });

    function SetHiddenFields() {
        $("#InvoiceDetails").val(JSON.stringify($("#grid").data().kendoGrid.dataSource.view()));
        $("#InvDate").val($("#datepicker1").val());
        if ($("#ProjectID").val() > 0)
            $("#ProjectName").val($("#ProjectID option:selected").text());
    }

    function Validations(e) {
       
        if ($("#SupplierID").val() == '') {
            e.preventDefault();
            toastr.error("Supplier is Required");
            return false;
        }
        if ($("#ExpenseType").val() == '') {
            e.preventDefault();
            toastr.error("Expense Type is Required");
            return false;
        }
        if ($("#QuotationNo").val() == '' || $("#QuotationNo").val() == null) {
            e.preventDefault();
            toastr.error("QuotationNo is Required");
            return false;
        }
        if ($("#InvoiceDetails").val() == '' || $("#InvoiceDetails").val() == '[]') {
            e.preventDefault();
            toastr.error("Items in grid are Required");
            return false;
        }
        if ($("#CGSTPercentage").val() == '' || $("#CGSTPercentage").val() == null) {
            e.preventDefault();
            toastr.error("CGST Percentage value is Required");
            return false;
        }
        if ($("#SGSTPercentage").val() == '' || $("#SGSTPercentage").val() == null) {
            e.preventDefault();
            toastr.error("SGST Percentage value is Required");
            return false;
        }
        if ($("#IGSTPercentage").val() == '' || $("#IGSTPercentage").val() == null) {
            e.preventDefault();
            toastr.error("IGST Percentage value is Required");
            return false;
        }
        validationsFlag = true;
    }


    $("#datepicker1").kendoDatePicker({ format: "dd/MM/yyyy" });
    var todayDate = kendo.toString(kendo.parseDate(new Date()), 'dd/MM/yyyy');
    $("#datepicker1").val(todayDate);
    function currency(data) {
        return '<b style="font-size:15px">&#8377;</b>' + '.' + data;
    }
    $(document).ready(function () {


        var dataSource = new kendo.data.DataSource({
            data: [],
            schema: {
                model: {
                    id: "SerialNo",
                    fields: {
                        SerialNo: { type: "number" },
                        InvoiceNo: { type: "number" },
                        QuotationNo: { type: "number" },
                        Description: { validation: { required: true } },
                        UnitPrice: { type: "number", validation: { required: true, min: 1 } },
                        Quantity: { type: "number", validation: { required: true } },
                        Amount: { type: "number", editable: "false", template: "#= currency(Amount)#" }
                    }

                }
            },

            pageSize: 10
        });

        $("#grid").kendoGrid({
            dataSource: dataSource,
            pageable: true,
            save: function (data) {
                if (data.model.UnitPrice && data.model.Quantity) {
                    data.model.set("Amount", data.model.UnitPrice * data.model.Quantity);
                }
                //var results = dataSource.aggregates().Amount;
                //console.log(results.sum, results.min, results.max);
                UpdateTotal();
                UpdateGST();
            },
            edit: function (e) {
                if (!e.model.isNew()) {
                    var priceEditor = e.container.find("input[name=UnitPrice]").data("kendoNumericTextBox");
                    var quantityEditor = e.container.find("input[name=Quantity]").data("kendoNumericTextBox");

                    priceEditor.bind("change", function (e) {
                        var price = this.value();
                        var quantity = quantityEditor.value();

                        var totalSpan = this.element.closest("tr").find(".totalSpan");
                        totalSpan.html(price * quantity);

                    });

                    quantityEditor.bind("change", function (e) {
                        var price = priceEditor.value();
                        var quantity = this.value();


                        var totalSpan = this.element.closest("tr").find(".totalSpan");
                        totalSpan.html(price * quantity);
                    });
                }
                UpdateTotal();
                UpdateGST();
            },
            aggregate: [
                { field: "Amount", aggregate: "sum" }],

            toolbar: ["create"],
            columns: [
                { field: "SerialNo", title: "Serial No", width: "90px" },
                "Description",
                { field: "UnitPrice", title: "Unit Price", width: "150px" },
                { field: "Quantity", width: "150px" },
                {
                    field: "Amount",
                    editor: function (cont, options) {
                        $("<span class='totalSpan'>" + options.model.Amount + "</span>").appendTo(cont);
                    },
                    aggregates: ["sum"]
                },

                { command: ["edit"], title: "&nbsp;", width: "250px" }],
            editable: {
                "mode": "inline", "createAt": "bottom"
            }
        });
    });


    function UpdateTotal() {
        var jsonObj = $("#grid").data().kendoGrid.dataSource.view();
        var Amount = 0;
        //int i = 0;
        for (var i = 0; i < jsonObj.length; i++) {
            Amount = Amount + parseFloat(jsonObj[i].Amount);
        }
        $("#TotalValue").val(Amount);
    }

    function UpdateGST() {
        var TotalValue = parseFloat($("#TotalValue").val());
        var CGSTPercentage = parseFloat($("#CGSTPercentage").val());
        var SGSTPercentage = parseFloat($("#SGSTPercentage").val());
        var IGSTPercentage = parseFloat($("#IGSTPercentage").val());

        if (TotalValue != null && TotalValue > 0 && CGSTPercentage != null && CGSTPercentage > 0) {
            $("#CGST").val(((TotalValue * CGSTPercentage) / 100).toFixed(2));
        }
        else {
            $("#CGST").val(0);
            $("#CGSTPercentage").val(0);
        }
        if (TotalValue != null && TotalValue > 0 && SGSTPercentage != null && SGSTPercentage > 0) {
            $("#SGST").val(((TotalValue * SGSTPercentage) / 100).toFixed(2));
        }
        else {
            $("#SGST").val(0);
            $("#SGSTPercentage").val(0);
        }
        if (TotalValue != null && TotalValue > 0 && IGSTPercentage != null && IGSTPercentage > 0) {
            $("#IGST").val(((TotalValue * IGSTPercentage) / 100).toFixed(2));
        }
        else {
            $("#IGST").val(0);
            $("#IGSTPercentage").val(0);
        }
        var netValue = parseFloat(TotalValue) + parseFloat($("#SGST").val()) + parseFloat($("#CGST").val()) + parseFloat($("#IGST").val());
        $("#NetValue").val(netValue.toFixed(2));

    }
</script>
<style>

    /* content editable */

    *[contenteditable] {
        border-radius: 0.25em;
        min-width: 1em;
        outline: 0;
    }

    *[contenteditable] {
        cursor: pointer;
    }

        *[contenteditable]:hover, *[contenteditable]:focus, td:hover *[contenteditable], td:focus *[contenteditable], img.hover {
            background: #DEF;
            box-shadow: 0 0 1em 0.5em #DEF;
        }

    span[contenteditable] {
        display: inline-block;
    }

    /* heading */

    h1 {
        font: bold 100% sans-serif;
        letter-spacing: 0.5em;
        text-align: center;
        text-transform: uppercase;
    }

    /* table */

    #example table {
        font-size: 75%;
        table-layout: fixed;
        width: 100%;
    }

    #example table {
        border-collapse: separate;
        border-spacing: 2px;
    }

    #example th, td {
        border-width: 1px;
        padding: 0.5em;
        position: relative;
        text-align: left;
    }

    #example th, td {
        border-radius: 0.25em;
        border-style: solid;
    }

    #example th {
        background: #EEE;
        border-color: #BBB;
    }

    #example td {
        border-color: #DDD;
    }

    /* page */

    /*html { font: 16px/1 'Open Sans', sans-serif; overflow: auto; padding: 0.5in; }
        html { background: #999; cursor: default; }

        body { box-sizing: border-box; height: 11in; margin: 0 auto; overflow: hidden; padding: 0.5in; width: 8.5in; }
        body { background: #FFF; border-radius: 1px; box-shadow: 0 0 1in -0.25in rgba(0, 0, 0, 0.5); }*/

    /* header */

    #example header {
        margin: 0 0 3em;
    }

        #example header:after {
            clear: both;
            content: "";
            display: table;
        }

        #example header h1 {
            background: #000;
            border-radius: 0.25em;
            color: #FFF;
            margin: 0 0 1em;
            padding: 0.5em 0;
        }

        #example header address {
            float: left;
            font-size: 75%;
            font-style: normal;
            line-height: 1.25;
            margin: 0 1em 1em 0;
        }

            #example header address p {
                margin: 0 0 0.25em;
            }

        #example header span, header img {
            display: block;
            float: right;
        }

        #example header span {
            margin: 0 0 1em 1em;
            max-height: 25%;
            max-width: 60%;
            position: relative;
        }

        #example header img {
            max-height: 100%;
            max-width: 100%;
        }

        #example header input {
            cursor: pointer;
            -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
            height: 100%;
            left: 0;
            opacity: 0;
            position: absolute;
            top: 0;
            width: 100%;
        }

    /* article */

    article, article address, table.meta, table.inventory {
        margin: 0 0 3em;
    }

        article:after {
            clear: both;
            content: "";
            display: table;
        }

        article h1 {
            clip: rect(0 0 0 0);
            position: absolute;
        }

        article address {
            float: left;
            font-size: 125%;
            font-weight: bold;
        }

    /* table meta & balance */

    #example table.meta, table.balance {
        float: right;
        width: 36%;
    }

        #example table.meta:after, table.balance:after {
            clear: both;
            content: "";
            display: table;
        }

        /* table meta */

        #example table.meta th {
            width: 40%;
        }

        #example table.meta td {
            width: 60%;
        }

    /* table items */

    #example table.inventory {
        clear: both;
        width: 100%;
    }

    table.inventory th {
        font-weight: bold;
        text-align: center;
    }

    /*table.inventory td:nth-child(1) { width: 26%; }
        table.inventory td:nth-child(2) { width: 26%; }
        table.inventory td:nth-child(3) { text-align: right; width: 12%; }
        table.inventory td:nth-child(4) { text-align: right; width: 12%; }
        table.inventory td:nth-child(5) { text-align: right; width: 12%; }*/

    /* table balance */

    table.balance th, table.balance td {
        width: 50%;
    }

    table.balance td {
        text-align: right;
    }

    /* aside */

    aside h1 {
        border: none;
        border-width: 0 0 1px;
        margin: 0 0 1em;
    }

    aside h1 {
        border-color: #999;
        border-bottom-style: solid;
    }

    /* javascript */

    .add, .cut {
        border-width: 1px;
        display: block;
        font-size: .8rem;
        padding: 0.25em 0.5em;
        float: left;
        text-align: center;
        width: 0.6em;
    }

    .add, .cut {
        background: #9AF;
        box-shadow: 0 1px 2px rgba(0,0,0,0.2);
        background-image: -moz-linear-gradient(#00ADEE 5%, #0078A5 100%);
        background-image: -webkit-linear-gradient(#00ADEE 5%, #0078A5 100%);
        border-radius: 0.5em;
        border-color: #0076A3;
        color: #FFF;
        cursor: pointer;
        font-weight: bold;
        text-shadow: 0 -1px 2px rgba(0,0,0,0.333);
    }

    .add {
        margin: -2.5em 0 0;
    }

        .add:hover {
            background: #00ADEE;
        }

    .cut {
        opacity: 0;
        position: absolute;
        top: 0;
        left: -1.5em;
    }

    .cut {
        -webkit-transition: opacity 100ms ease-in;
    }

    tr:hover .cut {
        opacity: 1;
    }

    @@media print {
        * {
            -webkit-print-color-adjust: exact;
        }

        html {
            background: none;
            padding: 0;
        }

        body {
            box-shadow: none;
            margin: 0;
        }

        span:empty {
            display: none;
        }

        .add, .cut {
            display: none;
        }
    }

    @@page {
        margin: 0;
    }
</style>