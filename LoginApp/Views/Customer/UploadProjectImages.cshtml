@model ModelLayer.ProjectPics
@{
    ViewBag.ProjectPics = "active";
    ViewBag.Title = "Project Pics";
    ViewBag.Admin = "active";
    var message = TempData["successmessage"] ?? string.Empty;
}

@using (Html.BeginForm("UploadProjectImages", "Customer", FormMethod.Post, new
{
    enctype = "multipart/form-data",
    role = "form",
    id = "submitbtn"

}))
{
    //@(ViewContext.ClientValidationEnabled = false)

@Html.AntiForgeryToken()
@Html.HiddenFor(x=>x.ProjectName)
<div class="jumbotron">
    <div class="row">
        <div class="col-md-12 col-xs" style="margin-top:0px">
            <h3 style="margin-top:0px;margin-bottom:4px" align="left">UPLOAD PROJECT IMAGES</h3>
            <div class="specialLine col-md-1"></div>
        </div>

    </div>
    <div class="row" style="padding-top:35px">
        @Html.LabelFor(m => m.ProjectID, new { @class = "col-md-2" })
        @Html.DropDownListFor(model => model.ProjectID, TempData["ProjectList"] as SelectList, "--Select Project--", new { @class = "textbox-control col-md-2 col-xs" })

    </div>

    <div class="row">
        @Html.LabelFor(m => m.Section, new { @class = "col-md-2" })

        @Html.DropDownListFor(m => m.Section, new List<SelectListItem>
{
     new SelectListItem{ Text="--Select Section--", Value = "0"  },
    new SelectListItem{ Text="HomePage ScrollableImages", Value = "HomePage ScrollableImages" },
    new SelectListItem{ Text="HomePage Gallery", Value = "HomePage Gallery" }
 }, new { @class = "textbox-control col-md-2 col-xs" })
    </div>



    <div id="fileURL" class="row">
        @Html.LabelFor(m => m.URL, new { @class = "col-md-2" })

        <input id="selfie1" type="file" name="File" required />



    </div>
    <br />
    <div class="row">
        <div class="row">
            <div class="col-sm-3 no-pad">
                <button type="submit" id="submitbtn" value="New" class="btn btn-default orangebg pull-right"><i class="fa fa-upload"></i>Upload</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 col-xs" style="margin-top:0px">
            <h3 style="margin-top:0px;margin-bottom:4px" align="left">PROJECT PICS</h3>
            <div class="specialLine col-md-1"></div>
        </div>

    </div>
    <div id="grid"></div>
</div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script>

    var validationsFlag = false;

    $("#txtURL").hide();



    $("#submitbtn").submit(function () {
        Validations();
        $("#ProjectName").val($("#ProjectID option:selected").text());
        if (validationsFlag) {

        }
        if (!$('#submitbtn').valid()) {
            $('#ValidationSummaryModal').modal('show');
        }
    });

    function Validations() {

        if ($("#ProjectID").val() == '0' || $("#ProjectID").val() == '') {
            toastr.error("Please Select the project"); return;
        }
        if ($("#Section").val() == '0' || $("#Section").val() =='') {
                toastr.error("Please Select the section"); return;
        }

        //if ($("#selfie1").val() == '') {
        //        toastr.error("Please Upload File!"); return;
        //}
         validationsFlag = true;
    }
    $(window).load(function () {
        var tempdataval = '@TempData["successmessage"]';
        if (tempdataval != '') {
            if (tempdataval == 'File Uploaded Successfully')
                toastr.success(tempdataval);
            else {
                toastr.error(tempdataval);
            }
        }

    });

    window.onload = function () {
        getLocation();
    }

    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition);
        } else {
            x.innerHTML = "Geolocation is not supported by this browser.";
        }
    }

    function showPosition(position) {
        $.get("/Cascade/UpdateAgentLocation", { latitude: position.coords.latitude, longitude: position.coords.longitude }, function (data) {
        });
    }


    $(document).ready(function () {
        dataSource = new kendo.data.DataSource({
            transport: {
                read: {
                    url: "/Customer/GetProjectImages",
                    contentType: "application/json",
                    dataType: "json",
                    type: "POST"
                },
                update: {
                    url: "/Customer/UpdateProjectImages",
                    dataType: "json",
                    complete: function (jqXhr, textStatus) {
                        if (textStatus == 'success') {
                            toastr.success('Update Successfull');
                            $("#grid").data("kendoGrid").dataSource.read();

                        }
                        else {
                            toastr.error('Error in Updating');
                            $("#grid").data("kendoGrid").dataSource.read();
                        }
                    }
                },
                parameterMap: function (options, operation) {
                    if (operation !== "read" && options.models) {
                        return { models: kendo.stringify(options.models) };
                    }
                }
            },
            batch: true,
            pageSize: 5,
            schema: {
                model: {
                    id: "Id",
                    fields: {
                        URL: { editable: false, nullable: true },
                        ProjectName: { editable: false, nullable: true },
                        Section: { editable: false, nullable: true },
                        Active: { type: "boolean" }


                    }
                }
            }
        });

        $('.k-icon k-i-edit').toggleClass('.k-icon k-i-edit');
        $("#grid").kendoGrid({
            dataSource: dataSource,
            pageable: true,
            height: 350,
            toolbar: ["search", "excel"],
            excel: {
                fileName: "ProjectPics.xlsx",

                //proxyURL: "https://demos.telerik.com/kendo-ui/service/export",
                filterable: true,
                allPages: true
            },
            excelExport: exportGridWithTemplatesContent,
            columns: [
                { field: "URL", title: "URL", width: "140px" },
                
                { field: "ProjectName", title: "ProjectName", width: "120px" },
                { field: "Section", title: "Section", width: "120px" },
                { field: "Active", title: "Active", width: "100px", "template": "<input type='checkbox' #= (Active == true) ? checked = 'checked' : ''# />" },

                { command: ["edit"], title: "&nbsp;", width: "100px" }
            ],
            editable: "inline"
        });


    });


    function exportGridWithTemplatesContent(e) {
        var data = e.data;
        var gridColumns = e.sender.columns;
        var sheet = e.workbook.sheets[0];
        var visibleGridColumns = [];
        var columnTemplates = [];
        var dataItem;
        // Create element to generate templates in.
        var elem = document.createElement('div');

        // Get a list of visible columns
        for (var i = 0; i < gridColumns.length; i++) {
            if (!gridColumns[i].hidden) {
                visibleGridColumns.push(gridColumns[i]);
            }
        }

        // Create a collection of the column templates, together with the current column index
        for (var i = 0; i < visibleGridColumns.length; i++) {
            if (visibleGridColumns[i].template) {
                columnTemplates.push({ cellIndex: i, template: kendo.template(visibleGridColumns[i].template) });
            }
        }

        // Traverse all exported rows.
        for (var i = 1; i < sheet.rows.length; i++) {
            var row = sheet.rows[i];
            // Traverse the column templates and apply them for each row at the stored column position.

            // Get the data item corresponding to the current row.
            var dataItem = data[i - 1];
            for (var j = 0; j < columnTemplates.length; j++) {
                var columnTemplate = columnTemplates[j];
                // Generate the template content for the current cell.
                elem.innerHTML = columnTemplate.template(dataItem);
                if (row.cells[columnTemplate.cellIndex] != undefined)
                    // Output the text content of the templated cell into the exported cell.
                    row.cells[columnTemplate.cellIndex].value = elem.textContent || elem.innerText || "";
            }
        }
    }
</script>
